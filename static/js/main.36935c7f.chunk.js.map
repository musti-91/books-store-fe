{"version":3,"sources":["styles/images/island_of_fog.jpg","components/Card/index.js","components/List/index.js","queries/index.js","components/AddBook/index.js","containers/AddBook/index.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","children","book","React","useState","isShown","setShown","styles","useSpring","height","from","useEffect","className","onClick","div","style","src","coverPicture","photo","alt","name","published","rating","pages","languages","map","ln","substring","toUpperCase","awards","ar","genre","List","books","length","i","key","getAuthors","gql","getBooks","addBookMutation","AddBook","state","authorId","open","_onChange","e","target","value","setState","_onSubmit","preventDefault","props","addBook","trim","variables","refetchQueries","query","_renderAuthors","loading","disabled","authors","author","id","this","Dialog","Grid","DialogTitle","DialogContent","onSubmit","DialogContentText","type","onChange","DialogActions","Button","color","isOpen","Component","Composer","compose","graphql","App","addBookModal","_renderLoading","data","label","Boolean","window","location","hostname","match","require","config","client","ApolloClient","uri","process","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36935c7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/island_of_fog.257cc49a.jpg\";","// @flow\nimport React, { type Node } from \"react\";\nimport { animated, useSpring } from \"react-spring\";\n// $FlowFixMe: scss files\nimport \"./card.scss\";\n// mock photo\nimport { type Book } from \"../../data.d\";\nimport photo from \"../../styles/images/island_of_fog.jpg\";\n/**\n * @author\n * @function Card\n **/\n\ntype Props = {\n    book: Book,\n    children?: Node,\n};\nconst Card = ({ children, book }: Props) => {\n    const [isShown, setShown] = React.useState(false);\n    const styles = useSpring({\n        height: isShown ? \"75%\" : \"100%\",\n        from: { height: \"100%\" },\n    });\n\n    React.useEffect(() => {\n        setShown(true);\n    }, []);\n    return (\n        <div className={\"card\"} onClick={() => setShown(!isShown)}>\n            <animated.div style={styles} className=\"cover\">\n                <img\n                    src={book && book.coverPicture ? book.coverPicture : photo}\n                    alt={book && `${book.name}-cover`}\n                />\n            </animated.div>\n            {/* change to icon */}\n            <div className={\"menu\"} onClick={() => setShown(!isShown)}>\n                ...\n            </div>\n            {/* Details for book */}\n            {isShown && book && (\n                <div>\n                    <div className={\"detail\"}>\n                        <div className={\"title\"}>[]: {book.published}</div>\n                        <div className={\"info\"}>[]:{book.rating}</div>\n                        <div className={\"pages\"}>[]: {book.pages}</div>\n                        <div className={\"languages\"}>\n                            []:\n                            {book.languages.map(ln =>\n                                ln.substring(0, 2).toUpperCase(),\n                            )}\n                        </div>\n                        <div className={\"awards\"}>\n                            []:\n                            {book.awards.map(ar => ar)}\n                        </div>\n                        <div className=\"genre\">\n                            []: {book.genre && book.genre.name}\n                        </div>\n                        <div className={\"awards\"}>[]: {\"Nobel\"}</div>\n                        <div className=\"genre\">[]: {\"Something\"}</div>\n                    </div>\n                </div>\n            )}\n            {/* eslint-disable react/no-unescaped-entities */}\n            {isShown && !book && (\n                <div className=\"error\">Can't get Book Detail</div>\n            )}\n            {children}\n        </div>\n    );\n};\n\nexport default Card;\n","// @flow\n\n// $FlowFixMe: resolve file\nimport \"./list.scss\";\n\nimport React from \"react\";\nimport Card from \"../Card\";\nimport { type Book } from \"../../data.d\";\n/**\n * @author\n * @function List\n **/\n\ntype Props = {\n    books: Book[],\n};\nconst List = ({ books }: Props) => {\n    return (\n        <div className=\"list\">\n            {books &&\n                books.length !== 0 &&\n                books.map((book, i) => (\n                    <Card key={`book-key-${i}`} book={book} />\n                ))}\n        </div>\n    );\n};\n\nexport default List;\n","import { gql } from \"apollo-boost\";\n\nexport const getAuthors = gql`\n    {\n        authors {\n            id\n            name\n            age\n            books {\n                id\n                name\n                genre {\n                    id\n                    name\n                }\n            }\n        }\n    }\n`;\n\nexport const getBooks = gql`\n    {\n        books {\n            id\n            name\n            published\n            rating\n            pages\n            awards\n            languages\n            coverPicture\n            genre {\n                id\n                name\n                description\n            }\n            author {\n                id\n                name\n                description\n            }\n        }\n    }\n`;\n\nexport const addBookMutation = gql`\n    mutation($name: String!, $genre: String!, $authorId: ID!) {\n        addBook(name: $name, genre: $genre, authorId: $authorId) {\n            id\n            name\n            genre {\n                id\n                name\n            }\n        }\n    }\n`;\n//\nexport const getBookQuery = gql`\n    query($id: ID) {\n        book(id: $id) {\n            id\n            name\n            genre {\n                id\n                name\n            }\n            author {\n                name\n                age\n                id\n                books {\n                    name\n                    id\n                }\n            }\n        }\n    }\n`;\n","// @flow\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Grid from \"@material-ui/core/Grid\";\nimport React, { Component } from \"react\";\n\ntype Props = {\n    addBook: (variables: *) => void,\n    getAuthors: *,\n    getBooks: *,\n    isOpen: boolean,\n};\n\ntype State = {\n    name: string,\n    genre: string,\n    authorId: string,\n    open: false,\n};\nexport default class AddBook extends Component<Props, State> {\n    state = {\n        name: \"\",\n        genre: \"\",\n        authorId: \"\",\n        open: false,\n    };\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        return {\n            ...state,\n            open: props.isOpen ? props.isOpen : false,\n        };\n    }\n\n    _onChange = e => {\n        const { value, name } = e.target;\n        this.setState(() => ({\n            [name]: value,\n        }));\n    };\n\n    _onSubmit = e => {\n        e.preventDefault();\n        const { addBook, getBooks } = this.props;\n        const { name, genre, authorId } = this.state;\n        if (\n            name.trim() !== \"\" &&\n            genre.trim() !== \"\" &&\n            authorId.trim() !== \"\"\n        ) {\n            addBook({\n                variables: {\n                    name,\n                    genre,\n                    authorId,\n                },\n                // update getBooks with new book.\n                refetchQueries: [\n                    {\n                        query: getBooks,\n                    },\n                ],\n            });\n        }\n    };\n\n    _renderAuthors = () => {\n        const { getAuthors } = this.props;\n        if (getAuthors.loading) {\n            return <option disabled>loading...</option>;\n        } else {\n            return getAuthors.authors.map(author => (\n                <option value={author.id} key={author.id}>\n                    {author.name}\n                </option>\n            ));\n        }\n    };\n\n    render() {\n        const { open } = this.state;\n\n        return (\n            <Dialog open={open}>\n                <Grid>\n                    <div className=\"add-book\">\n                        <DialogTitle>Add Book</DialogTitle>\n                        <DialogContent>\n                            <form onSubmit={this._onSubmit}>\n                                <div className=\"field\">\n                                    <DialogContentText>\n                                        Book name:{\" \"}\n                                    </DialogContentText>\n                                    <input\n                                        type=\"text\"\n                                        onChange={this._onChange}\n                                        name=\"name\"\n                                    />\n                                </div>\n                                <div className=\"field\">\n                                    <DialogContentText>\n                                        Genre:{\" \"}\n                                    </DialogContentText>\n                                    <input\n                                        type=\"text\"\n                                        onChange={this._onChange}\n                                        name=\"genre\"\n                                    />\n                                </div>\n                                <div className=\"field\">\n                                    <DialogContentText>\n                                        Author name:{\" \"}\n                                    </DialogContentText>\n                                    <select\n                                        onChange={this._onChange}\n                                        name=\"authorId\"\n                                    >\n                                        <option>Select Author</option>\n                                        {this._renderAuthors()}\n                                    </select>\n                                </div>\n                                <DialogActions>\n                                    <Button type=\"submit\" color=\"primary\">\n                                        Add Book\n                                    </Button>\n                                    <Button\n                                        color=\"danger\"\n                                        onClick={() =>\n                                            this.setState(() => ({\n                                                open: false,\n                                            }))\n                                        }\n                                    >\n                                        Cancel\n                                    </Button>\n                                </DialogActions>\n                            </form>\n                        </DialogContent>\n                    </div>\n                </Grid>\n            </Dialog>\n        );\n    }\n}\n","import { flowRight as compose } from \"lodash\";\nimport { graphql } from \"react-apollo\";\nimport AddBook from \"../../components/AddBook\";\nimport { addBookMutation, getAuthors, getBooks } from \"../../queries\";\n\nconst Composer = compose(\n    graphql(getAuthors, { name: \"getAuthors\" }),\n    graphql(getBooks, { name: \"getBooks\" }),\n    graphql(addBookMutation, { name: \"addBook\" }),\n);\nexport default Composer(AddBook);\n","// @flow\nimport Button from \"@material-ui/core/Button\";\nimport React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport List from \"../components/List\";\nimport { Data } from \"../data.d\";\nimport { getBooks } from \"../queries\";\nimport AddBook from \"./AddBook\";\n\ntype Props = {\n    data: Data,\n};\ntype State = {\n    addBookModal: boolean,\n};\nclass App extends Component<Props, State> {\n    state = {\n        addBookModal: false,\n    };\n    render() {\n        const { data } = this.props;\n        const { addBookModal } = this.state;\n        return (\n            <div className=\"main-container\">\n                {data.loading && this._renderLoading()}\n                {!data.loading && data.books && <List books={data.books} />}\n                <Button\n                    label=\"Add Book\"\n                    onClick={() =>\n                        this.setState(() => ({ addBookModal: !addBookModal }))\n                    }\n                >\n                    {\"Add book\"}\n                </Button>\n                {addBookModal && <AddBook isOpen={true} />}\n            </div>\n        );\n    }\n    _renderLoading = () => {\n        return <div>Loading ....</div>;\n    };\n}\n\nexport default graphql(getBooks)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ApolloClient from \"apollo-boost\";\nimport React from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/global.scss\";\n\nrequire(\"dotenv\").config();\n\n// TODO:\n// 1. Add Material ui\n// 2. Config storybook: restructure Components\n// 3. restructure files.\n// 4: fix an issue caused running app.\n// 5: Add Flowtype\n// 6: Add redux?\n\n// apollo client\nconst client = new ApolloClient({\n    uri: `${process.env.REACT_APP_BASE_API}/graphql`,\n});\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    // eslint-disable-next-line\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}